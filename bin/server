#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const {execSync} = require('child_process');


let conf = {};
try {
    conf = require("./../../../master.config.json");
}
catch(e) {
    console.log(e);
}
conf.port = conf.port || 9000;

const Webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const webpackConfig = require(`./../../../webpack.${conf.mode}.config`);
const _package = require("./../../../package.json");



if(process.argv.indexOf("--only_force_update") !== -1) {
    console.log("force update devs");
    if(_package.checkoutDependencies) {
        let update = "", install = "";
        for(let key in _package.checkoutDependencies) {
            if(fs.existsSync("./node_modules/" + key + "/package.json")) {
                update += _package.checkoutDependencies[key] + ' ';
            }
            else {
                install += _package.checkoutDependencies[key] + ' --no-save ';
            }
        }
        install && execSync('npm install ' + install);
        update && execSync('npm update ' + update);
    }
    return 0;
}

else {

    if(_package.checkoutDependencies) {
        let install = "";
        for(let key in _package.checkoutDependencies) {
            if(!fs.existsSync("./node_modules/" + key + "/package.json")) {
                install += _package.checkoutDependencies[key] + ' --no-save ';
            }
        }
        install && execSync('npm install ' + install);
    }

    execSync(`npm run pre_run_${conf.mode}`, {cwd: path.resolve(__dirname,`./../`)});

    webpackConfig.entry['index'].unshift(
        `webpack-dev-server/client?http://` + require("ip").address() + `:${conf.port}/`,
        "webpack/hot/dev-server"
    );

    webpackConfig.output.hotUpdateChunkFilename = 'hot/hot-update.js';
    webpackConfig.output.hotUpdateMainFilename = 'hot/hot-update.json';
    webpackConfig.plugins.push(new Webpack.HotModuleReplacementPlugin());

    let compiler = Webpack(webpackConfig);

    let server = new WebpackDevServer(compiler, {
        headers: { "Access-Control-Allow-Origin": "*" },
        disableHostCheck: true,
        stats: {
            colors: true,
        },
        contentBase: path.resolve(__dirname, './../build/'),
        publicPath: path.resolve(__dirname, '/static/game/'+ _package["name"]),
        hot: true,
        inline: true,
        watchContentBase: true
    }).listen(conf.port, "0.0.0.0", function(err) {
        console.log("Starting server on http://localhost: " + conf.port);
    });

}

